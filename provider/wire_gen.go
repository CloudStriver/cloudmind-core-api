// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"github.com/CloudStriver/cloudmind-core-api/biz/application/service"
	"github.com/CloudStriver/cloudmind-core-api/biz/infrastructure/config"
	"github.com/CloudStriver/cloudmind-core-api/biz/infrastructure/rpc/cloudmind_content"
	"github.com/CloudStriver/cloudmind-core-api/biz/infrastructure/rpc/cloudmind_sts"
	"github.com/CloudStriver/cloudmind-core-api/biz/infrastructure/rpc/platform_relation"
)

// Injectors from wire.go:

func NewProvider() (*Provider, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	client := cloudmind_content.NewCloudMindContent(configConfig)
	cloudMindContent := &cloudmind_content.CloudMindContent{
		Client: client,
	}
	contentService := &service.ContentService{
		Config:           configConfig,
		CloudMindContent: cloudMindContent,
	}
	stsserviceClient := cloudmind_sts.NewCloudMindSts(configConfig)
	cloudMindSts := &cloudmind_sts.CloudMindSts{
		Client: stsserviceClient,
	}
	authService := &service.AuthService{
		Config:           configConfig,
		CloudMindContent: cloudMindContent,
		CloudMindSts:     cloudMindSts,
	}
	relationserviceClient := platform_relation.NewPlatFormRelation(configConfig)
	platFormRelation := &platform_relation.PlatFormRelation{
		Client: relationserviceClient,
	}
	relationService := &service.RelationService{
		Config:           configConfig,
		PlatFormRelation: platFormRelation,
		CloudMindContent: cloudMindContent,
	}
	providerProvider := &Provider{
		Config:          configConfig,
		ContentService:  contentService,
		AuthService:     authService,
		RelationService: relationService,
	}
	return providerProvider, nil
}
