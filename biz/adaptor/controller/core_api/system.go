// Code generated by hertz generator.

package core_api

import (
	"context"
	"github.com/CloudStriver/cloudmind-core-api/biz/adaptor"
	"github.com/CloudStriver/cloudmind-core-api/provider"

	core_api "github.com/CloudStriver/cloudmind-core-api/biz/application/dto/cloudmind/core_api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// GetNotifications .
// @router /system/getNotifications [GET]
func GetNotifications(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetNotificationsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.GetNotificationsResp)
	p := provider.Get()
	resp, err = p.NotificationService.GetNotifications(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// GetNotificationCount .
// @router /system/getNotificationCount [GET]
func GetNotificationCount(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetNotificationCountReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.GetNotificationCountResp)
	p := provider.Get()
	resp, err = p.NotificationService.GetNotificationCount(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// UpdateSlider .
// @router /system/updateSlider [POST]
func UpdateSlider(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UpdateSliderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.UpdateSliderResp)
	p := provider.Get()
	resp, err = p.SliderService.UpdateSlider(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// DeleteSlider .
// @router system/deleteSlider [POST]
func DeleteSlider(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.DeleteSliderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.DeleteSliderResp)
	p := provider.Get()
	resp, err = p.SliderService.DeleteSlider(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// CreateSlider .
// @router system/createSlider [POST]
func CreateSlider(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.CreateSliderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.CreateSliderResp)
	p := provider.Get()
	resp, err = p.SliderService.CreateSlider(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// GetSliders .
// @router system/getSliders [GET]
func GetSliders(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetSlidersReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.GetSlidersResp)
	p := provider.Get()
	resp, err = p.SliderService.GetSliders(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// UpdateNotifications .
// @router /system/updateNotifications [POST]
//func UpdateNotifications(ctx context.Context, c *app.RequestContext) {
//	var err error
//	var req core_api.UpdateNotificationsReq
//	err = c.BindAndValidate(&req)
//	if err != nil {
//		c.String(consts.StatusBadRequest, err.Error())
//		return
//	}
//
//	resp := new(core_api.UpdateNotificationsResp)
//
//	c.JSON(consts.StatusOK, resp)
//}

// DeleteNotifications .
// @router /system/deleteNotifications [POST]
func DeleteNotifications(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.DeleteNotificationsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.DeleteNotificationsResp)
	p := provider.Get()
	resp, err = p.NotificationService.DeleteNotifications(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}
