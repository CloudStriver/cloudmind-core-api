// Code generated by hertz generator.

package core_api

import (
	"context"

	core_api "github.com/CloudStriver/cloudmind-core-api/biz/application/dto/cloudmind/core_api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateComment .
// @router /comment/createComment [POST]
func CreateComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.CreateCommentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.CreateCommentResp)

	c.JSON(consts.StatusOK, resp)
}

// GetComment .
// @router /comment/getComment [GET]
func GetComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetCommentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.GetCommentResp)

	c.JSON(consts.StatusOK, resp)
}

// GetComments .
// @router /comment/getComments [GET]
func GetComments(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetCommentsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.GetCommentsResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteComment .
// @router /comment/deleteComment [POST]
func DeleteComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.DeleteCommentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.DeleteCommentResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateComment .
// @router /comment/updateComment [POST]
func UpdateComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UpdateCommentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.UpdateCommentResp)

	c.JSON(consts.StatusOK, resp)
}

// SetCommentState .
// @router /comment/setCommentState [POST]
func SetCommentState(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.SetCommentStateReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.SetCommentStateResp)

	c.JSON(consts.StatusOK, resp)
}

// SetCommentAttrs .
// @router /comment/setCommentAttrs [POST]
func SetCommentAttrs(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.SetCommentAttrsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.SetCommentAttrsResp)

	c.JSON(consts.StatusOK, resp)
}

// GetCommentSubject .
// @router /comment/getCommentSubject [GET]
func GetCommentSubject(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetCommentSubjectReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.GetCommentSubjectResp)

	c.JSON(consts.StatusOK, resp)
}

// CreateCommentSubject .
// @router /comment/createCommentSubject [POST]
func CreateCommentSubject(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.CreateCommentSubjectReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.CreateCommentSubjectResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateCommentSubject .
// @router /comment/updateCommentSubject [POST]
func UpdateCommentSubject(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UpdateCommentSubjectReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.UpdateCommentSubjectResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteCommentSubject .
// @router /comment/deleteCommentSubject [POST]
func DeleteCommentSubject(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.DeleteCommentSubjectReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.DeleteCommentSubjectResp)

	c.JSON(consts.StatusOK, resp)
}

// SetCommentSubjectState .
// @router /comment/setCommentSubjectState [POST]
func SetCommentSubjectState(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.SetCommentSubjectStateReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.SetCommentSubjectStateResp)

	c.JSON(consts.StatusOK, resp)
}

// SetCommentSubjectAttrs .
// @router /comment/setCommentSubjectAttrs [POST]
func SetCommentSubjectAttrs(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.SetCommentSubjectAttrsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.SetCommentSubjectAttrsResp)

	c.JSON(consts.StatusOK, resp)
}
