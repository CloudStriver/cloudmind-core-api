// Code generated by hertz generator.

package core_api

import (
	"context"

	core_api "github.com/CloudStriver/cloudmind-core-api/biz/application/dto/cloudmind/core_api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateLabel .
// @router /label/createLabel [POST]
func CreateLabel(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.CreateLabelReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.CreateLabelResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteLabel .
// @router /label/deleteLabel [POST]
func DeleteLabel(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.DeleteLabelReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.DeleteLabelResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateLabel .
// @router /label/updateLabel [POST]
func UpdateLabel(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UpdateLabelReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.UpdateLabelResp)

	c.JSON(consts.StatusOK, resp)
}

// GetLabels .
// @router /label/getLabels [GET]
func GetLabels(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetLabelsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.GetLabelsResp)

	c.JSON(consts.StatusOK, resp)
}

// GetLabel .
// @router /label/getLabel [GET]
func GetLabel(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetLabelReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.GetLabelResp)

	c.JSON(consts.StatusOK, resp)
}

// GetLabelsInBatch .
// @router /label/getLabelsInBatch [GET]
func GetLabelsInBatch(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetLabelsInBatchReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.GetLabelsInBatchResp)

	c.JSON(consts.StatusOK, resp)
}

// CreateObject .
// @router /label/createObject [POST]
func CreateObject(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.CreateObjectReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.CreateObjectResp)

	c.JSON(consts.StatusOK, resp)
}

// CreateObjects .
// @router /label/createObjects [POST]
func CreateObjects(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.CreateObjectsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.CreateObjectsResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteObject .
// @router /label/deleteObject [POST]
func DeleteObject(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.DeleteObjectReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.DeleteObjectResp)

	c.JSON(consts.StatusOK, resp)
}

// GetObjects .
// @router /label/getObjects [GET]
func GetObjects(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetObjectsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.GetObjectsResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateObject .
// @router /label/updateObject [POST]
func UpdateObject(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UpdateObjectReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.UpdateObjectResp)

	c.JSON(consts.StatusOK, resp)
}
