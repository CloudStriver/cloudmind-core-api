// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: cloudmind/core_api/common.proto

package core_api

import (
	_ "github.com/CloudStriver/cloudmind-core-api/biz/application/dto/basic"
	_ "github.com/CloudStriver/cloudmind-core-api/biz/application/dto/http"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PostStatus int32

const (
	PostStatus_UnknownPostStatus PostStatus = 0
	PostStatus_PublicPostStatus  PostStatus = 1
	PostStatus_DraftPostStatus   PostStatus = 2
	PostStatus_PrivatePostStatus PostStatus = 3
)

// Enum value maps for PostStatus.
var (
	PostStatus_name = map[int32]string{
		0: "UnknownPostStatus",
		1: "PublicPostStatus",
		2: "DraftPostStatus",
		3: "PrivatePostStatus",
	}
	PostStatus_value = map[string]int32{
		"UnknownPostStatus": 0,
		"PublicPostStatus":  1,
		"DraftPostStatus":   2,
		"PrivatePostStatus": 3,
	}
)

func (x PostStatus) Enum() *PostStatus {
	p := new(PostStatus)
	*p = x
	return p
}

func (x PostStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_core_api_common_proto_enumTypes[0].Descriptor()
}

func (PostStatus) Type() protoreflect.EnumType {
	return &file_cloudmind_core_api_common_proto_enumTypes[0]
}

func (x PostStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostStatus.Descriptor instead.
func (PostStatus) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{0}
}

type ProductStatus int32

const (
	ProductStatus_UnknownProductStatus ProductStatus = 0
	ProductStatus_PublicProductStatus  ProductStatus = 1
	ProductStatus_PrivateProductStatus ProductStatus = 2
)

// Enum value maps for ProductStatus.
var (
	ProductStatus_name = map[int32]string{
		0: "UnknownProductStatus",
		1: "PublicProductStatus",
		2: "PrivateProductStatus",
	}
	ProductStatus_value = map[string]int32{
		"UnknownProductStatus": 0,
		"PublicProductStatus":  1,
		"PrivateProductStatus": 2,
	}
)

func (x ProductStatus) Enum() *ProductStatus {
	p := new(ProductStatus)
	*p = x
	return p
}

func (x ProductStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_core_api_common_proto_enumTypes[1].Descriptor()
}

func (ProductStatus) Type() protoreflect.EnumType {
	return &file_cloudmind_core_api_common_proto_enumTypes[1]
}

func (x ProductStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductStatus.Descriptor instead.
func (ProductStatus) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{1}
}

type Product_Type int32

const (
	Product_Type_UnknownProduct_Type Product_Type = 0
	Product_Type_Flow_Type           Product_Type = 1
	Product_Type_Memory_Type         Product_Type = 2
	Product_Type_File_Type           Product_Type = 3
)

// Enum value maps for Product_Type.
var (
	Product_Type_name = map[int32]string{
		0: "UnknownProduct_Type",
		1: "Flow_Type",
		2: "Memory_Type",
		3: "File_Type",
	}
	Product_Type_value = map[string]int32{
		"UnknownProduct_Type": 0,
		"Flow_Type":           1,
		"Memory_Type":         2,
		"File_Type":           3,
	}
)

func (x Product_Type) Enum() *Product_Type {
	p := new(Product_Type)
	*p = x
	return p
}

func (x Product_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Product_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_core_api_common_proto_enumTypes[2].Descriptor()
}

func (Product_Type) Type() protoreflect.EnumType {
	return &file_cloudmind_core_api_common_proto_enumTypes[2]
}

func (x Product_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Product_Type.Descriptor instead.
func (Product_Type) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{2}
}

type TargetType int32

const (
	TargetType_UnKnowTargetType   TargetType = 0
	TargetType_UserType           TargetType = 1
	TargetType_FileType           TargetType = 2
	TargetType_PostType           TargetType = 3
	TargetType_CommentContentType TargetType = 4
)

// Enum value maps for TargetType.
var (
	TargetType_name = map[int32]string{
		0: "UnKnowTargetType",
		1: "UserType",
		2: "FileType",
		3: "PostType",
		4: "CommentContentType",
	}
	TargetType_value = map[string]int32{
		"UnKnowTargetType":   0,
		"UserType":           1,
		"FileType":           2,
		"PostType":           3,
		"CommentContentType": 4,
	}
)

func (x TargetType) Enum() *TargetType {
	p := new(TargetType)
	*p = x
	return p
}

func (x TargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_core_api_common_proto_enumTypes[3].Descriptor()
}

func (TargetType) Type() protoreflect.EnumType {
	return &file_cloudmind_core_api_common_proto_enumTypes[3]
}

func (x TargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TargetType.Descriptor instead.
func (TargetType) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{3}
}

type RelationType int32

const (
	RelationType_UnKnowRelationType   RelationType = 0
	RelationType_LikeRelationType     RelationType = 1 // 点赞
	RelationType_FollowRelationType   RelationType = 2 // 关注
	RelationType_CollectRelationType  RelationType = 3 // 收藏
	RelationType_ShareRelationType    RelationType = 4 // 分享
	RelationType_CommentRelationType  RelationType = 5 // 评论
	RelationType_ViewRelationType     RelationType = 6 // 浏览
	RelationType_HateRelationType     RelationType = 7
	RelationType_DownLoadRelationType RelationType = 8  // 下载
	RelationType_UploadRelationType   RelationType = 9  // 上传
	RelationType_PublishRelationType  RelationType = 10 // 发布
)

// Enum value maps for RelationType.
var (
	RelationType_name = map[int32]string{
		0:  "UnKnowRelationType",
		1:  "LikeRelationType",
		2:  "FollowRelationType",
		3:  "CollectRelationType",
		4:  "ShareRelationType",
		5:  "CommentRelationType",
		6:  "ViewRelationType",
		7:  "HateRelationType",
		8:  "DownLoadRelationType",
		9:  "UploadRelationType",
		10: "PublishRelationType",
	}
	RelationType_value = map[string]int32{
		"UnKnowRelationType":   0,
		"LikeRelationType":     1,
		"FollowRelationType":   2,
		"CollectRelationType":  3,
		"ShareRelationType":    4,
		"CommentRelationType":  5,
		"ViewRelationType":     6,
		"HateRelationType":     7,
		"DownLoadRelationType": 8,
		"UploadRelationType":   9,
		"PublishRelationType":  10,
	}
)

func (x RelationType) Enum() *RelationType {
	p := new(RelationType)
	*p = x
	return p
}

func (x RelationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_core_api_common_proto_enumTypes[4].Descriptor()
}

func (RelationType) Type() protoreflect.EnumType {
	return &file_cloudmind_core_api_common_proto_enumTypes[4]
}

func (x RelationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationType.Descriptor instead.
func (RelationType) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{4}
}

type IsDel int32

const (
	IsDel_Is_null IsDel = 0
	IsDel_Is_no   IsDel = 1
	IsDel_Is_soft IsDel = 2
	IsDel_Is_hard IsDel = 3
)

// Enum value maps for IsDel.
var (
	IsDel_name = map[int32]string{
		0: "Is_null",
		1: "Is_no",
		2: "Is_soft",
		3: "Is_hard",
	}
	IsDel_value = map[string]int32{
		"Is_null": 0,
		"Is_no":   1,
		"Is_soft": 2,
		"Is_hard": 3,
	}
)

func (x IsDel) Enum() *IsDel {
	p := new(IsDel)
	*p = x
	return p
}

func (x IsDel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsDel) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_core_api_common_proto_enumTypes[5].Descriptor()
}

func (IsDel) Type() protoreflect.EnumType {
	return &file_cloudmind_core_api_common_proto_enumTypes[5]
}

func (x IsDel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsDel.Descriptor instead.
func (IsDel) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{5}
}

type DocumentType int32

const (
	DocumentType_DocumentType_null     DocumentType = 0
	DocumentType_DocumentType_personal DocumentType = 1
	DocumentType_DocumentType_public   DocumentType = 2
)

// Enum value maps for DocumentType.
var (
	DocumentType_name = map[int32]string{
		0: "DocumentType_null",
		1: "DocumentType_personal",
		2: "DocumentType_public",
	}
	DocumentType_value = map[string]int32{
		"DocumentType_null":     0,
		"DocumentType_personal": 1,
		"DocumentType_public":   2,
	}
)

func (x DocumentType) Enum() *DocumentType {
	p := new(DocumentType)
	*p = x
	return p
}

func (x DocumentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_core_api_common_proto_enumTypes[6].Descriptor()
}

func (DocumentType) Type() protoreflect.EnumType {
	return &file_cloudmind_core_api_common_proto_enumTypes[6]
}

func (x DocumentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentType.Descriptor instead.
func (DocumentType) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{6}
}

type State int32

const (
	State_UnknownState State = 0
	State_Normal       State = 1
	State_Deleted      State = 2
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "UnknownState",
		1: "Normal",
		2: "Deleted",
	}
	State_value = map[string]int32{
		"UnknownState": 0,
		"Normal":       1,
		"Deleted":      2,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_core_api_common_proto_enumTypes[7].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_cloudmind_core_api_common_proto_enumTypes[7]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{7}
}

type Attrs int32

const (
	Attrs_UnknownAttrs         Attrs = 0
	Attrs_None                 Attrs = 1
	Attrs_Pinned               Attrs = 2
	Attrs_Highlighted          Attrs = 3
	Attrs_PinnedAndHighlighted Attrs = 4
)

// Enum value maps for Attrs.
var (
	Attrs_name = map[int32]string{
		0: "UnknownAttrs",
		1: "None",
		2: "Pinned",
		3: "Highlighted",
		4: "PinnedAndHighlighted",
	}
	Attrs_value = map[string]int32{
		"UnknownAttrs":         0,
		"None":                 1,
		"Pinned":               2,
		"Highlighted":          3,
		"PinnedAndHighlighted": 4,
	}
)

func (x Attrs) Enum() *Attrs {
	p := new(Attrs)
	*p = x
	return p
}

func (x Attrs) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Attrs) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_core_api_common_proto_enumTypes[8].Descriptor()
}

func (Attrs) Type() protoreflect.EnumType {
	return &file_cloudmind_core_api_common_proto_enumTypes[8]
}

func (x Attrs) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Attrs.Descriptor instead.
func (Attrs) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{8}
}

type Category int32

const (
	Category_UnknownCategory Category = 0
	Category_UserCategory    Category = 1
	Category_FileCategory    Category = 2
	Category_PostCategory    Category = 3
)

// Enum value maps for Category.
var (
	Category_name = map[int32]string{
		0: "UnknownCategory",
		1: "UserCategory",
		2: "FileCategory",
		3: "PostCategory",
	}
	Category_value = map[string]int32{
		"UnknownCategory": 0,
		"UserCategory":    1,
		"FileCategory":    2,
		"PostCategory":    3,
	}
)

func (x Category) Enum() *Category {
	p := new(Category)
	*p = x
	return p
}

func (x Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Category) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudmind_core_api_common_proto_enumTypes[9].Descriptor()
}

func (Category) Type() protoreflect.EnumType {
	return &file_cloudmind_core_api_common_proto_enumTypes[9]
}

func (x Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Category.Descriptor instead.
func (Category) EnumDescriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{9}
}

type Slider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliderId string `protobuf:"bytes,1,opt,name=sliderId,proto3" json:"sliderId" form:"sliderId" query:"sliderId"`
	ImageUrl string `protobuf:"bytes,2,opt,name=imageUrl,proto3" json:"imageUrl" form:"imageUrl" query:"imageUrl"`
	LinkUrl  string `protobuf:"bytes,3,opt,name=linkUrl,proto3" json:"linkUrl" form:"linkUrl" query:"linkUrl"`
	IsPublic int64  `protobuf:"varint,4,opt,name=isPublic,proto3" json:"isPublic" form:"isPublic" query:"isPublic"`
}

func (x *Slider) Reset() {
	*x = Slider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slider) ProtoMessage() {}

func (x *Slider) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slider.ProtoReflect.Descriptor instead.
func (*Slider) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{0}
}

func (x *Slider) GetSliderId() string {
	if x != nil {
		return x.SliderId
	}
	return ""
}

func (x *Slider) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Slider) GetLinkUrl() string {
	if x != nil {
		return x.LinkUrl
	}
	return ""
}

func (x *Slider) GetIsPublic() int64 {
	if x != nil {
		return x.IsPublic
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId" form:"userId" query:"userId"`
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name" query:"name"`
	Url           string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url" form:"url" query:"url"`
	Labels        []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels" form:"labels" query:"labels"`
	Followed      bool     `protobuf:"varint,5,opt,name=followed,proto3" json:"followed" form:"followed" query:"followed"`
	FollowedCount int64    `protobuf:"varint,6,opt,name=followedCount,proto3" json:"followedCount" form:"followedCount" query:"followedCount"`
	Description   string   `protobuf:"bytes,7,opt,name=description,proto3" json:"description" form:"description" query:"description"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{1}
}

func (x *User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *User) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *User) GetFollowed() bool {
	if x != nil {
		return x.Followed
	}
	return false
}

func (x *User) GetFollowedCount() int64 {
	if x != nil {
		return x.FollowedCount
	}
	return 0
}

func (x *User) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type SimpleUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId" form:"userId" query:"userId"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name" query:"name"`
	Url    string `protobuf:"bytes,3,opt,name=url,proto3" json:"url" form:"url" query:"url"`
}

func (x *SimpleUser) Reset() {
	*x = SimpleUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleUser) ProtoMessage() {}

func (x *SimpleUser) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleUser.ProtoReflect.Descriptor instead.
func (*SimpleUser) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{2}
}

func (x *SimpleUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SimpleUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SimpleUser) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type PostUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId" form:"userId" query:"userId"`
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name" query:"name"`
	Url           string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url" form:"url" query:"url"`
	Labels        []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels" form:"labels" query:"labels"`
	Followed      bool     `protobuf:"varint,5,opt,name=followed,proto3" json:"followed" form:"followed" query:"followed"`
	FollowedCount int64    `protobuf:"varint,6,opt,name=followedCount,proto3" json:"followedCount" form:"followedCount" query:"followedCount"`
	Description   string   `protobuf:"bytes,7,opt,name=description,proto3" json:"description" form:"description" query:"description"`
	LikedCount    int64    `protobuf:"varint,8,opt,name=likedCount,proto3" json:"likedCount" form:"likedCount" query:"likedCount"`
	PostCount     int64    `protobuf:"varint,9,opt,name=postCount,proto3" json:"postCount" form:"postCount" query:"postCount"`
}

func (x *PostUser) Reset() {
	*x = PostUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostUser) ProtoMessage() {}

func (x *PostUser) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostUser.ProtoReflect.Descriptor instead.
func (*PostUser) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{3}
}

func (x *PostUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PostUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostUser) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PostUser) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PostUser) GetFollowed() bool {
	if x != nil {
		return x.Followed
	}
	return false
}

func (x *PostUser) GetFollowedCount() int64 {
	if x != nil {
		return x.FollowedCount
	}
	return 0
}

func (x *PostUser) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PostUser) GetLikedCount() int64 {
	if x != nil {
		return x.LikedCount
	}
	return 0
}

func (x *PostUser) GetPostCount() int64 {
	if x != nil {
		return x.PostCount
	}
	return 0
}

type FileUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId" form:"userId" query:"userId"`
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name" query:"name"`
	Url           string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url" form:"url" query:"url"`
	Labels        []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels" form:"labels" query:"labels"`
	Followed      bool     `protobuf:"varint,5,opt,name=followed,proto3" json:"followed" form:"followed" query:"followed"`
	FollowedCount int64    `protobuf:"varint,6,opt,name=followedCount,proto3" json:"followedCount" form:"followedCount" query:"followedCount"`
	Description   string   `protobuf:"bytes,7,opt,name=description,proto3" json:"description" form:"description" query:"description"`
	LikedCount    int64    `protobuf:"varint,8,opt,name=likedCount,proto3" json:"likedCount" form:"likedCount" query:"likedCount"`
	FileCount     int64    `protobuf:"varint,9,opt,name=fileCount,proto3" json:"fileCount" form:"fileCount" query:"fileCount"`
}

func (x *FileUser) Reset() {
	*x = FileUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUser) ProtoMessage() {}

func (x *FileUser) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUser.ProtoReflect.Descriptor instead.
func (*FileUser) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{4}
}

func (x *FileUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FileUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileUser) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FileUser) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FileUser) GetFollowed() bool {
	if x != nil {
		return x.Followed
	}
	return false
}

func (x *FileUser) GetFollowedCount() int64 {
	if x != nil {
		return x.FollowedCount
	}
	return 0
}

func (x *FileUser) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FileUser) GetLikedCount() int64 {
	if x != nil {
		return x.LikedCount
	}
	return 0
}

func (x *FileUser) GetFileCount() int64 {
	if x != nil {
		return x.FileCount
	}
	return 0
}

type HotUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId" form:"userId" query:"userId"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name" query:"name"`
	Url         string `protobuf:"bytes,3,opt,name=url,proto3" json:"url" form:"url" query:"url"`
	Followed    bool   `protobuf:"varint,4,opt,name=followed,proto3" json:"followed" form:"followed" query:"followed"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description" form:"description" query:"description"`
}

func (x *HotUser) Reset() {
	*x = HotUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotUser) ProtoMessage() {}

func (x *HotUser) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotUser.ProtoReflect.Descriptor instead.
func (*HotUser) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{5}
}

func (x *HotUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *HotUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HotUser) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HotUser) GetFollowed() bool {
	if x != nil {
		return x.Followed
	}
	return false
}

func (x *HotUser) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type HotPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostId string `protobuf:"bytes,1,opt,name=postId,proto3" json:"postId" form:"postId" query:"postId"`
	Title  string `protobuf:"bytes,2,opt,name=title,proto3" json:"title" form:"title" query:"title"`
}

func (x *HotPost) Reset() {
	*x = HotPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotPost) ProtoMessage() {}

func (x *HotPost) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotPost.ProtoReflect.Descriptor instead.
func (*HotPost) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{6}
}

func (x *HotPost) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

func (x *HotPost) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type HotFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId string `protobuf:"bytes,1,opt,name=fileId,proto3" json:"fileId" form:"fileId" query:"fileId"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name" query:"name"`
	Type   string `protobuf:"bytes,3,opt,name=type,proto3" json:"type" form:"type" query:"type"`
}

func (x *HotFile) Reset() {
	*x = HotFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotFile) ProtoMessage() {}

func (x *HotFile) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotFile.ProtoReflect.Descriptor instead.
func (*HotFile) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{7}
}

func (x *HotFile) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *HotFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HotFile) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type RecommendUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId" form:"userId" query:"userId"`
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name" query:"name"`
	Url           string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url" form:"url" query:"url"`
	FollowedCount int64    `protobuf:"varint,4,opt,name=followedCount,proto3" json:"followedCount" form:"followedCount" query:"followedCount"`
	Description   string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description" form:"description" query:"description"`
	Labels        []string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels" form:"labels" query:"labels"`
	Followed      bool     `protobuf:"varint,7,opt,name=followed,proto3" json:"followed" form:"followed" query:"followed"`
}

func (x *RecommendUser) Reset() {
	*x = RecommendUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendUser) ProtoMessage() {}

func (x *RecommendUser) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendUser.ProtoReflect.Descriptor instead.
func (*RecommendUser) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{8}
}

func (x *RecommendUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RecommendUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecommendUser) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RecommendUser) GetFollowedCount() int64 {
	if x != nil {
		return x.FollowedCount
	}
	return 0
}

func (x *RecommendUser) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RecommendUser) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RecommendUser) GetFollowed() bool {
	if x != nil {
		return x.Followed
	}
	return false
}

type UserDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" form:"name" query:"name"`
	Sex         int64  `protobuf:"varint,2,opt,name=sex,proto3" json:"sex" form:"sex" query:"sex"`
	FullName    string `protobuf:"bytes,3,opt,name=fullName,proto3" json:"fullName" form:"fullName" query:"fullName"`
	IdCard      string `protobuf:"bytes,4,opt,name=idCard,proto3" json:"idCard" form:"idCard" query:"idCard"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description" form:"description" query:"description"`
	Url         string `protobuf:"bytes,6,opt,name=url,proto3" json:"url" form:"url" query:"url"`
}

func (x *UserDetail) Reset() {
	*x = UserDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDetail) ProtoMessage() {}

func (x *UserDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDetail.ProtoReflect.Descriptor instead.
func (*UserDetail) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{9}
}

func (x *UserDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserDetail) GetSex() int64 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *UserDetail) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *UserDetail) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *UserDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UserDetail) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type PrivateFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" form:"id" query:"id"`
	UserId    string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId" form:"userId" query:"userId"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" form:"name" query:"name"`
	Type      string `protobuf:"bytes,4,opt,name=type,proto3" json:"type" form:"type" query:"type"`
	Path      string `protobuf:"bytes,5,opt,name=path,proto3" json:"path" form:"path" query:"path"`
	FatherId  string `protobuf:"bytes,6,opt,name=fatherId,proto3" json:"fatherId" form:"fatherId" query:"fatherId"`
	SpaceSize int64  `protobuf:"varint,7,opt,name=spaceSize,proto3" json:"spaceSize" form:"spaceSize" query:"spaceSize"`
	IsDel     int64  `protobuf:"varint,8,opt,name=isDel,proto3" json:"isDel" form:"isDel" query:"isDel"`
	CreateAt  int64  `protobuf:"varint,9,opt,name=createAt,proto3" json:"createAt" form:"createAt" query:"createAt"`
	UpdateAt  int64  `protobuf:"varint,10,opt,name=updateAt,proto3" json:"updateAt" form:"updateAt" query:"updateAt"`
	DeleteAt  int64  `protobuf:"varint,11,opt,name=deleteAt,proto3" json:"deleteAt" form:"deleteAt" query:"deleteAt"`
}

func (x *PrivateFile) Reset() {
	*x = PrivateFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateFile) ProtoMessage() {}

func (x *PrivateFile) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateFile.ProtoReflect.Descriptor instead.
func (*PrivateFile) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{10}
}

func (x *PrivateFile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PrivateFile) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PrivateFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrivateFile) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PrivateFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PrivateFile) GetFatherId() string {
	if x != nil {
		return x.FatherId
	}
	return ""
}

func (x *PrivateFile) GetSpaceSize() int64 {
	if x != nil {
		return x.SpaceSize
	}
	return 0
}

func (x *PrivateFile) GetIsDel() int64 {
	if x != nil {
		return x.IsDel
	}
	return 0
}

func (x *PrivateFile) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *PrivateFile) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *PrivateFile) GetDeleteAt() int64 {
	if x != nil {
		return x.DeleteAt
	}
	return 0
}

type PublicFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id" form:"id" query:"id"`
	UserId       string        `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId" form:"userId" query:"userId"`
	Name         string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name" form:"name" query:"name"`
	Type         string        `protobuf:"bytes,4,opt,name=type,proto3" json:"type" form:"type" query:"type"`
	SpaceSize    int64         `protobuf:"varint,5,opt,name=spaceSize,proto3" json:"spaceSize" form:"spaceSize" query:"spaceSize"`
	Zone         string        `protobuf:"bytes,6,opt,name=zone,proto3" json:"zone" form:"zone" query:"zone"`
	Description  string        `protobuf:"bytes,7,opt,name=description,proto3" json:"description" form:"description" query:"description"`
	AuditStatus  int64         `protobuf:"varint,8,opt,name=auditStatus,proto3" json:"auditStatus" form:"auditStatus" query:"auditStatus"`
	Labels       []*Label      `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels" form:"labels" query:"labels"`
	CreateAt     int64         `protobuf:"varint,10,opt,name=createAt,proto3" json:"createAt" form:"createAt" query:"createAt"`
	Author       *FileUser     `protobuf:"bytes,11,opt,name=author,proto3" json:"author" form:"author" query:"author"`                         // 作者信息
	FileCount    *FileCount    `protobuf:"bytes,12,opt,name=fileCount,proto3" json:"fileCount" form:"fileCount" query:"fileCount"`             // 文章统计信息
	FileRelation *FileRelation `protobuf:"bytes,13,opt,name=fileRelation,proto3" json:"fileRelation" form:"fileRelation" query:"fileRelation"` // 文章关系信息
}

func (x *PublicFile) Reset() {
	*x = PublicFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicFile) ProtoMessage() {}

func (x *PublicFile) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicFile.ProtoReflect.Descriptor instead.
func (*PublicFile) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{11}
}

func (x *PublicFile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PublicFile) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PublicFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublicFile) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PublicFile) GetSpaceSize() int64 {
	if x != nil {
		return x.SpaceSize
	}
	return 0
}

func (x *PublicFile) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *PublicFile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PublicFile) GetAuditStatus() int64 {
	if x != nil {
		return x.AuditStatus
	}
	return 0
}

func (x *PublicFile) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PublicFile) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *PublicFile) GetAuthor() *FileUser {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *PublicFile) GetFileCount() *FileCount {
	if x != nil {
		return x.FileCount
	}
	return nil
}

func (x *PublicFile) GetFileRelation() *FileRelation {
	if x != nil {
		return x.FileRelation
	}
	return nil
}

type SearchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" form:"id" query:"id"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name" query:"name"`
	Type        int64    `protobuf:"varint,3,opt,name=type,proto3" json:"type" form:"type" query:"type"`
	Description string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description" form:"description" query:"description"`
	CreateAt    int64    `protobuf:"varint,5,opt,name=createAt,proto3" json:"createAt" form:"createAt" query:"createAt"`
	Labels      []*Label `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels" form:"labels" query:"labels"`
	ViewCount   int64    `protobuf:"varint,7,opt,name=viewCount,proto3" json:"viewCount" form:"viewCount" query:"viewCount"`
	LikedCount  int64    `protobuf:"varint,8,opt,name=likedCount,proto3" json:"likedCount" form:"likedCount" query:"likedCount"`
	Liked       int64    `protobuf:"varint,9,opt,name=liked,proto3" json:"liked" form:"liked" query:"liked"`
	UserId      string   `protobuf:"bytes,10,opt,name=userId,proto3" json:"userId" form:"userId" query:"userId"`
	UserName    string   `protobuf:"bytes,11,opt,name=userName,proto3" json:"userName" form:"userName" query:"userName"`
	PostUrl     string   `protobuf:"bytes,12,opt,name=postUrl,proto3" json:"postUrl" form:"postUrl" query:"postUrl"`
}

func (x *SearchInfo) Reset() {
	*x = SearchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInfo) ProtoMessage() {}

func (x *SearchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInfo.ProtoReflect.Descriptor instead.
func (*SearchInfo) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{12}
}

func (x *SearchInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SearchInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchInfo) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SearchInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SearchInfo) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *SearchInfo) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SearchInfo) GetViewCount() int64 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *SearchInfo) GetLikedCount() int64 {
	if x != nil {
		return x.LikedCount
	}
	return 0
}

func (x *SearchInfo) GetLiked() int64 {
	if x != nil {
		return x.Liked
	}
	return 0
}

func (x *SearchInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SearchInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SearchInfo) GetPostUrl() string {
	if x != nil {
		return x.PostUrl
	}
	return ""
}

type ShareCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         string `protobuf:"bytes,1,opt,name=code,proto3" json:"code" form:"code" query:"code"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name" query:"name"`
	Status       int64  `protobuf:"varint,3,opt,name=status,proto3" json:"status" form:"status" query:"status"`
	BrowseNumber int64  `protobuf:"varint,4,opt,name=browseNumber,proto3" json:"browseNumber" form:"browseNumber" query:"browseNumber"`
	CreateAt     int64  `protobuf:"varint,5,opt,name=createAt,proto3" json:"createAt" form:"createAt" query:"createAt"`
	Key          string `protobuf:"bytes,6,opt,name=key,proto3" json:"key" form:"key" query:"key"`
}

func (x *ShareCode) Reset() {
	*x = ShareCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareCode) ProtoMessage() {}

func (x *ShareCode) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareCode.ProtoReflect.Descriptor instead.
func (*ShareCode) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{13}
}

func (x *ShareCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ShareCode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShareCode) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ShareCode) GetBrowseNumber() int64 {
	if x != nil {
		return x.BrowseNumber
	}
	return 0
}

func (x *ShareCode) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *ShareCode) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SearchField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name" form:"name" query:"name"`
	Id          *string `protobuf:"bytes,2,opt,name=id,proto3,oneof" json:"id" form:"id" query:"id"`
	Label       *string `protobuf:"bytes,3,opt,name=label,proto3,oneof" json:"label" form:"label" query:"label"` // 仅限Post
	Text        *string `protobuf:"bytes,4,opt,name=text,proto3,oneof" json:"text" form:"text" query:"text"`
	Title       *string `protobuf:"bytes,5,opt,name=title,proto3,oneof" json:"title" form:"title" query:"title"`
	Description *string `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description" form:"description" query:"description"`
	ProductName *string `protobuf:"bytes,7,opt,name=productName,proto3,oneof" json:"productName" form:"productName" query:"productName"`
}

func (x *SearchField) Reset() {
	*x = SearchField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchField) ProtoMessage() {}

func (x *SearchField) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchField.ProtoReflect.Descriptor instead.
func (*SearchField) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{14}
}

func (x *SearchField) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SearchField) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *SearchField) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *SearchField) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *SearchField) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *SearchField) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SearchField) GetProductName() string {
	if x != nil && x.ProductName != nil {
		return *x.ProductName
	}
	return ""
}

type SearchOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*SearchOptions_AllFieldsKey
	//	*SearchOptions_MultiFieldsKey
	Type isSearchOptions_Type `protobuf_oneof:"Type"`
}

func (x *SearchOptions) Reset() {
	*x = SearchOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOptions) ProtoMessage() {}

func (x *SearchOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOptions.ProtoReflect.Descriptor instead.
func (*SearchOptions) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{15}
}

func (m *SearchOptions) GetType() isSearchOptions_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SearchOptions) GetAllFieldsKey() string {
	if x, ok := x.GetType().(*SearchOptions_AllFieldsKey); ok {
		return x.AllFieldsKey
	}
	return ""
}

func (x *SearchOptions) GetMultiFieldsKey() *SearchField {
	if x, ok := x.GetType().(*SearchOptions_MultiFieldsKey); ok {
		return x.MultiFieldsKey
	}
	return nil
}

type isSearchOptions_Type interface {
	isSearchOptions_Type()
}

type SearchOptions_AllFieldsKey struct {
	AllFieldsKey string `protobuf:"bytes,1,opt,name=allFieldsKey,proto3,oneof"`
}

type SearchOptions_MultiFieldsKey struct {
	MultiFieldsKey *SearchField `protobuf:"bytes,2,opt,name=multiFieldsKey,proto3,oneof"`
}

func (*SearchOptions_AllFieldsKey) isSearchOptions_Type() {}

func (*SearchOptions_MultiFieldsKey) isSearchOptions_Type() {}

type ShareField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code" form:"code" query:"code"`
	Key  string `protobuf:"bytes,2,opt,name=key,proto3" json:"key" form:"key" query:"key"`
}

func (x *ShareField) Reset() {
	*x = ShareField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareField) ProtoMessage() {}

func (x *ShareField) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareField.ProtoReflect.Descriptor instead.
func (*ShareField) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{16}
}

func (x *ShareField) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ShareField) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type FileFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyUserId       *string  `protobuf:"bytes,1,opt,name=onlyUserId,proto3,oneof" json:"onlyUserId" form:"onlyUserId" query:"onlyUserId"`
	OnlyFileId       *string  `protobuf:"bytes,2,opt,name=onlyFileId,proto3,oneof" json:"onlyFileId" form:"onlyFileId" query:"onlyFileId"`
	OnlyFatherId     *string  `protobuf:"bytes,3,opt,name=onlyFatherId,proto3,oneof" json:"onlyFatherId" form:"onlyFatherId" query:"onlyFatherId"`
	OnlyIsDel        *int64   `protobuf:"varint,4,opt,name=onlyIsDel,proto3,oneof" json:"onlyIsDel" form:"onlyIsDel" query:"onlyIsDel"`                             // 是否删除 1：未删除 2：软删除 3:彻底删除
	OnlyZone         *string  `protobuf:"bytes,5,opt,name=onlyZone,proto3,oneof" json:"onlyZone" form:"onlyZone" query:"onlyZone"`                                  // 分区
	OnlySubZone      *string  `protobuf:"bytes,6,opt,name=onlySubZone,proto3,oneof" json:"onlySubZone" form:"onlySubZone" query:"onlySubZone"`                      // 子分区
	OnlyDocumentType *int64   `protobuf:"varint,7,opt,name=onlyDocumentType,proto3,oneof" json:"onlyDocumentType" form:"onlyDocumentType" query:"onlyDocumentType"` // 操作类型 1：个人空间文件 2：公共空间文件
	OnlyLabelId      []string `protobuf:"bytes,8,rep,name=onlyLabelId,proto3" json:"onlyLabelId" form:"onlyLabelId" query:"onlyLabelId"`                            // 标签id
	OnlyType         []string `protobuf:"bytes,9,rep,name=onlyType,proto3" json:"onlyType" form:"onlyType" query:"onlyType"`                                        // 文件类型
	OnlyCategory     *int64   `protobuf:"varint,10,opt,name=onlyCategory,proto3,oneof" json:"onlyCategory" form:"onlyCategory" query:"onlyCategory"`
}

func (x *FileFilterOptions) Reset() {
	*x = FileFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileFilterOptions) ProtoMessage() {}

func (x *FileFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileFilterOptions.ProtoReflect.Descriptor instead.
func (*FileFilterOptions) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{17}
}

func (x *FileFilterOptions) GetOnlyUserId() string {
	if x != nil && x.OnlyUserId != nil {
		return *x.OnlyUserId
	}
	return ""
}

func (x *FileFilterOptions) GetOnlyFileId() string {
	if x != nil && x.OnlyFileId != nil {
		return *x.OnlyFileId
	}
	return ""
}

func (x *FileFilterOptions) GetOnlyFatherId() string {
	if x != nil && x.OnlyFatherId != nil {
		return *x.OnlyFatherId
	}
	return ""
}

func (x *FileFilterOptions) GetOnlyIsDel() int64 {
	if x != nil && x.OnlyIsDel != nil {
		return *x.OnlyIsDel
	}
	return 0
}

func (x *FileFilterOptions) GetOnlyZone() string {
	if x != nil && x.OnlyZone != nil {
		return *x.OnlyZone
	}
	return ""
}

func (x *FileFilterOptions) GetOnlySubZone() string {
	if x != nil && x.OnlySubZone != nil {
		return *x.OnlySubZone
	}
	return ""
}

func (x *FileFilterOptions) GetOnlyDocumentType() int64 {
	if x != nil && x.OnlyDocumentType != nil {
		return *x.OnlyDocumentType
	}
	return 0
}

func (x *FileFilterOptions) GetOnlyLabelId() []string {
	if x != nil {
		return x.OnlyLabelId
	}
	return nil
}

func (x *FileFilterOptions) GetOnlyType() []string {
	if x != nil {
		return x.OnlyType
	}
	return nil
}

func (x *FileFilterOptions) GetOnlyCategory() int64 {
	if x != nil && x.OnlyCategory != nil {
		return *x.OnlyCategory
	}
	return 0
}

type ShareFileFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyCode   *string `protobuf:"bytes,1,opt,name=onlyCode,proto3,oneof" json:"onlyCode" form:"onlyCode" query:"onlyCode"`
	OnlyUserId *string `protobuf:"bytes,2,opt,name=onlyUserId,proto3,oneof" json:"onlyUserId" form:"onlyUserId" query:"onlyUserId"`
}

func (x *ShareFileFilterOptions) Reset() {
	*x = ShareFileFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareFileFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareFileFilterOptions) ProtoMessage() {}

func (x *ShareFileFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareFileFilterOptions.ProtoReflect.Descriptor instead.
func (*ShareFileFilterOptions) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{18}
}

func (x *ShareFileFilterOptions) GetOnlyCode() string {
	if x != nil && x.OnlyCode != nil {
		return *x.OnlyCode
	}
	return ""
}

func (x *ShareFileFilterOptions) GetOnlyUserId() string {
	if x != nil && x.OnlyUserId != nil {
		return *x.OnlyUserId
	}
	return ""
}

type PostCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewCount    int64 `protobuf:"varint,1,opt,name=viewCount,proto3" json:"viewCount" form:"viewCount" query:"viewCount"`             // 浏览量
	LikedCount   int64 `protobuf:"varint,2,opt,name=likedCount,proto3" json:"likedCount" form:"likedCount" query:"likedCount"`         // 点赞量
	CommentCount int64 `protobuf:"varint,3,opt,name=commentCount,proto3" json:"commentCount" form:"commentCount" query:"commentCount"` // 评论量
	ShareCount   int64 `protobuf:"varint,4,opt,name=shareCount,proto3" json:"shareCount" form:"shareCount" query:"shareCount"`         // 分享量
	CollectCount int64 `protobuf:"varint,5,opt,name=collectCount,proto3" json:"collectCount" form:"collectCount" query:"collectCount"` // 收藏量
}

func (x *PostCount) Reset() {
	*x = PostCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCount) ProtoMessage() {}

func (x *PostCount) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCount.ProtoReflect.Descriptor instead.
func (*PostCount) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{19}
}

func (x *PostCount) GetViewCount() int64 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *PostCount) GetLikedCount() int64 {
	if x != nil {
		return x.LikedCount
	}
	return 0
}

func (x *PostCount) GetCommentCount() int64 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *PostCount) GetShareCount() int64 {
	if x != nil {
		return x.ShareCount
	}
	return 0
}

func (x *PostCount) GetCollectCount() int64 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

type PostRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Liked     bool `protobuf:"varint,1,opt,name=liked,proto3" json:"liked" form:"liked" query:"liked"`
	Collected bool `protobuf:"varint,2,opt,name=collected,proto3" json:"collected" form:"collected" query:"collected"`
}

func (x *PostRelation) Reset() {
	*x = PostRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostRelation) ProtoMessage() {}

func (x *PostRelation) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostRelation.ProtoReflect.Descriptor instead.
func (*PostRelation) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{20}
}

func (x *PostRelation) GetLiked() bool {
	if x != nil {
		return x.Liked
	}
	return false
}

func (x *PostRelation) GetCollected() bool {
	if x != nil {
		return x.Collected
	}
	return false
}

type FileCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewCount    int64 `protobuf:"varint,1,opt,name=viewCount,proto3" json:"viewCount" form:"viewCount" query:"viewCount"`             // 浏览量
	LikedCount   int64 `protobuf:"varint,2,opt,name=likedCount,proto3" json:"likedCount" form:"likedCount" query:"likedCount"`         // 点赞量
	CommentCount int64 `protobuf:"varint,3,opt,name=commentCount,proto3" json:"commentCount" form:"commentCount" query:"commentCount"` // 评论量
	ShareCount   int64 `protobuf:"varint,4,opt,name=shareCount,proto3" json:"shareCount" form:"shareCount" query:"shareCount"`         // 分享量
	CollectCount int64 `protobuf:"varint,5,opt,name=collectCount,proto3" json:"collectCount" form:"collectCount" query:"collectCount"` // 收藏量
}

func (x *FileCount) Reset() {
	*x = FileCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileCount) ProtoMessage() {}

func (x *FileCount) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileCount.ProtoReflect.Descriptor instead.
func (*FileCount) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{21}
}

func (x *FileCount) GetViewCount() int64 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *FileCount) GetLikedCount() int64 {
	if x != nil {
		return x.LikedCount
	}
	return 0
}

func (x *FileCount) GetCommentCount() int64 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *FileCount) GetShareCount() int64 {
	if x != nil {
		return x.ShareCount
	}
	return 0
}

func (x *FileCount) GetCollectCount() int64 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

type FileRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Liked     bool `protobuf:"varint,1,opt,name=liked,proto3" json:"liked" form:"liked" query:"liked"`
	Collected bool `protobuf:"varint,2,opt,name=collected,proto3" json:"collected" form:"collected" query:"collected"`
}

func (x *FileRelation) Reset() {
	*x = FileRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRelation) ProtoMessage() {}

func (x *FileRelation) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRelation.ProtoReflect.Descriptor instead.
func (*FileRelation) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{22}
}

func (x *FileRelation) GetLiked() bool {
	if x != nil {
		return x.Liked
	}
	return false
}

func (x *FileRelation) GetCollected() bool {
	if x != nil {
		return x.Collected
	}
	return false
}

type CommentRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Liked bool `protobuf:"varint,1,opt,name=liked,proto3" json:"liked" form:"liked" query:"liked"`
	Hated bool `protobuf:"varint,2,opt,name=hated,proto3" json:"hated" form:"hated" query:"hated"`
}

func (x *CommentRelation) Reset() {
	*x = CommentRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentRelation) ProtoMessage() {}

func (x *CommentRelation) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentRelation.ProtoReflect.Descriptor instead.
func (*CommentRelation) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{23}
}

func (x *CommentRelation) GetLiked() bool {
	if x != nil {
		return x.Liked
	}
	return false
}

func (x *CommentRelation) GetHated() bool {
	if x != nil {
		return x.Hated
	}
	return false
}

type Post struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostId       string   `protobuf:"bytes,1,opt,name=postId,proto3" json:"postId" form:"postId" query:"postId"`
	Title        string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title" form:"title" query:"title"`
	Text         string   `protobuf:"bytes,3,opt,name=text,proto3" json:"text" form:"text" query:"text"`
	Url          string   `protobuf:"bytes,4,opt,name=url,proto3" json:"url" form:"url" query:"url"`
	Labels       []*Label `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels" form:"labels" query:"labels"`
	LikeCount    int64    `protobuf:"varint,6,opt,name=likeCount,proto3" json:"likeCount" form:"likeCount" query:"likeCount"`             // 点赞量
	CommentCount int64    `protobuf:"varint,7,opt,name=commentCount,proto3" json:"commentCount" form:"commentCount" query:"commentCount"` // 评论量
	ViewCount    int64    `protobuf:"varint,8,opt,name=viewCount,proto3" json:"viewCount" form:"viewCount" query:"viewCount"`
	Liked        bool     `protobuf:"varint,9,opt,name=liked,proto3" json:"liked" form:"liked" query:"liked"` // 是否点赞
	UserName     string   `protobuf:"bytes,10,opt,name=userName,proto3" json:"userName" form:"userName" query:"userName"`
}

func (x *Post) Reset() {
	*x = Post{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Post) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Post) ProtoMessage() {}

func (x *Post) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Post.ProtoReflect.Descriptor instead.
func (*Post) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{24}
}

func (x *Post) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

func (x *Post) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Post) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Post) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Post) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Post) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *Post) GetCommentCount() int64 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *Post) GetViewCount() int64 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *Post) GetLiked() bool {
	if x != nil {
		return x.Liked
	}
	return false
}

func (x *Post) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationId string `protobuf:"bytes,1,opt,name=notificationId,proto3" json:"notificationId" form:"notificationId" query:"notificationId"`
	FromName       string `protobuf:"bytes,2,opt,name=fromName,proto3" json:"fromName" form:"fromName" query:"fromName"`          // 通知来源人的名字
	FromId         string `protobuf:"bytes,3,opt,name=fromId,proto3" json:"fromId" form:"fromId" query:"fromId"`                  // 通知来源人的ID
	ToName         string `protobuf:"bytes,4,opt,name=toName,proto3" json:"toName" form:"toName" query:"toName"`                  // 通知接收人的名字
	ToId           string `protobuf:"bytes,5,opt,name=toId,proto3" json:"toId" form:"toId" query:"toId"`                          // 接收通知的ID
	ToUserId       string `protobuf:"bytes,6,opt,name=toUserId,proto3" json:"toUserId" form:"toUserId" query:"toUserId"`          // 接收通知人的Id
	Type           int64  `protobuf:"varint,7,opt,name=type,proto3" json:"type" form:"type" query:"type"`                         // 通知类型
	CreateTime     int64  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime" form:"createTime" query:"createTime"` // 通知创建时间
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{25}
}

func (x *Notification) GetNotificationId() string {
	if x != nil {
		return x.NotificationId
	}
	return ""
}

func (x *Notification) GetFromName() string {
	if x != nil {
		return x.FromName
	}
	return ""
}

func (x *Notification) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *Notification) GetToName() string {
	if x != nil {
		return x.ToName
	}
	return ""
}

func (x *Notification) GetToId() string {
	if x != nil {
		return x.ToId
	}
	return ""
}

func (x *Notification) GetToUserId() string {
	if x != nil {
		return x.ToUserId
	}
	return ""
}

func (x *Notification) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Notification) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

// 一级评论：rootId = fatherId = subjectId
// 二级评论：rootId = fatherId != subjectId
// 三级评论：rootId != fatherId != subjectId
type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id" form:"id" query:"id"`
	SubjectId       string           `protobuf:"bytes,2,opt,name=subjectId,proto3" json:"subjectId" form:"subjectId" query:"subjectId"`
	RootId          string           `protobuf:"bytes,3,opt,name=rootId,proto3" json:"rootId" form:"rootId" query:"rootId"`
	FatherId        string           `protobuf:"bytes,4,opt,name=fatherId,proto3" json:"fatherId" form:"fatherId" query:"fatherId"`
	Count           int64            `protobuf:"varint,5,opt,name=count,proto3" json:"count" form:"count" query:"count"`                                         // 回复数
	State           int64            `protobuf:"varint,6,opt,name=state,proto3" json:"state" form:"state" query:"state"`                                         // 1: 正常, 2: 删除
	Attrs           int64            `protobuf:"varint,7,opt,name=attrs,proto3" json:"attrs" form:"attrs" query:"attrs"`                                         // 1: 无, 2: 置顶, 3: 精华, 4: 置顶+精华
	Labels          []string         `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels" form:"labels" query:"labels"`                                      // 标签：作者点赞，作者回复等
	UserId          string           `protobuf:"bytes,9,opt,name=userId,proto3" json:"userId" form:"userId" query:"userId"`                                      // 评论者
	AtUserId        string           `protobuf:"bytes,10,opt,name=atUserId,proto3" json:"atUserId" form:"atUserId" query:"atUserId"`                             // @谁
	Content         string           `protobuf:"bytes,11,opt,name=content,proto3" json:"content" form:"content" query:"content"`                                 // 内容
	Meta            string           `protobuf:"bytes,12,opt,name=meta,proto3" json:"meta" form:"meta" query:"meta"`                                             // 皮肤，字体等
	CreateTime      int64            `protobuf:"varint,13,opt,name=createTime,proto3" json:"createTime" form:"createTime" query:"createTime"`                    // 创建时间
	Like            int64            `protobuf:"varint,14,opt,name=like,proto3" json:"like" form:"like" query:"like"`                                            // 点赞数
	Author          *SimpleUser      `protobuf:"bytes,15,opt,name=author,proto3" json:"author" form:"author" query:"author"`                                     // 评论者信息
	CommentRelation *CommentRelation `protobuf:"bytes,16,opt,name=commentRelation,proto3" json:"commentRelation" form:"commentRelation" query:"commentRelation"` // 评论关系信息
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{26}
}

func (x *Comment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Comment) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *Comment) GetRootId() string {
	if x != nil {
		return x.RootId
	}
	return ""
}

func (x *Comment) GetFatherId() string {
	if x != nil {
		return x.FatherId
	}
	return ""
}

func (x *Comment) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Comment) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Comment) GetAttrs() int64 {
	if x != nil {
		return x.Attrs
	}
	return 0
}

func (x *Comment) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Comment) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Comment) GetAtUserId() string {
	if x != nil {
		return x.AtUserId
	}
	return ""
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetMeta() string {
	if x != nil {
		return x.Meta
	}
	return ""
}

func (x *Comment) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Comment) GetLike() int64 {
	if x != nil {
		return x.Like
	}
	return 0
}

func (x *Comment) GetAuthor() *SimpleUser {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Comment) GetCommentRelation() *CommentRelation {
	if x != nil {
		return x.CommentRelation
	}
	return nil
}

type CommentFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyUserId    *string `protobuf:"bytes,1,opt,name=onlyUserId,proto3,oneof" json:"onlyUserId" form:"onlyUserId" query:"onlyUserId"`
	OnlyAtUserId  *string `protobuf:"bytes,2,opt,name=onlyAtUserId,proto3,oneof" json:"onlyAtUserId" form:"onlyAtUserId" query:"onlyAtUserId"`
	OnlyCommentId *string `protobuf:"bytes,3,opt,name=onlyCommentId,proto3,oneof" json:"onlyCommentId" form:"onlyCommentId" query:"onlyCommentId"`
	OnlySubjectId *string `protobuf:"bytes,4,opt,name=onlySubjectId,proto3,oneof" json:"onlySubjectId" form:"onlySubjectId" query:"onlySubjectId"`
	OnlyRootId    *string `protobuf:"bytes,5,opt,name=onlyRootId,proto3,oneof" json:"onlyRootId" form:"onlyRootId" query:"onlyRootId"`
	OnlyFatherId  *string `protobuf:"bytes,6,opt,name=onlyFatherId,proto3,oneof" json:"onlyFatherId" form:"onlyFatherId" query:"onlyFatherId"`
	OnlyState     *int64  `protobuf:"varint,7,opt,name=onlyState,proto3,oneof" json:"onlyState" form:"onlyState" query:"onlyState"`
	OnlyAttrs     *int64  `protobuf:"varint,8,opt,name=onlyAttrs,proto3,oneof" json:"onlyAttrs" form:"onlyAttrs" query:"onlyAttrs"`
}

func (x *CommentFilterOptions) Reset() {
	*x = CommentFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentFilterOptions) ProtoMessage() {}

func (x *CommentFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentFilterOptions.ProtoReflect.Descriptor instead.
func (*CommentFilterOptions) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{27}
}

func (x *CommentFilterOptions) GetOnlyUserId() string {
	if x != nil && x.OnlyUserId != nil {
		return *x.OnlyUserId
	}
	return ""
}

func (x *CommentFilterOptions) GetOnlyAtUserId() string {
	if x != nil && x.OnlyAtUserId != nil {
		return *x.OnlyAtUserId
	}
	return ""
}

func (x *CommentFilterOptions) GetOnlyCommentId() string {
	if x != nil && x.OnlyCommentId != nil {
		return *x.OnlyCommentId
	}
	return ""
}

func (x *CommentFilterOptions) GetOnlySubjectId() string {
	if x != nil && x.OnlySubjectId != nil {
		return *x.OnlySubjectId
	}
	return ""
}

func (x *CommentFilterOptions) GetOnlyRootId() string {
	if x != nil && x.OnlyRootId != nil {
		return *x.OnlyRootId
	}
	return ""
}

func (x *CommentFilterOptions) GetOnlyFatherId() string {
	if x != nil && x.OnlyFatherId != nil {
		return *x.OnlyFatherId
	}
	return ""
}

func (x *CommentFilterOptions) GetOnlyState() int64 {
	if x != nil && x.OnlyState != nil {
		return *x.OnlyState
	}
	return 0
}

func (x *CommentFilterOptions) GetOnlyAttrs() int64 {
	if x != nil && x.OnlyAttrs != nil {
		return *x.OnlyAttrs
	}
	return 0
}

type SubjectFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyUserId    *string `protobuf:"bytes,1,opt,name=onlyUserId,proto3,oneof" json:"onlyUserId" form:"onlyUserId" query:"onlyUserId"`
	OnlySubjectId *string `protobuf:"bytes,2,opt,name=onlySubjectId,proto3,oneof" json:"onlySubjectId" form:"onlySubjectId" query:"onlySubjectId"`
	OnlyState     *int64  `protobuf:"varint,3,opt,name=onlyState,proto3,oneof" json:"onlyState" form:"onlyState" query:"onlyState"`
	OnlyAttrs     *int64  `protobuf:"varint,4,opt,name=onlyAttrs,proto3,oneof" json:"onlyAttrs" form:"onlyAttrs" query:"onlyAttrs"`
}

func (x *SubjectFilterOptions) Reset() {
	*x = SubjectFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectFilterOptions) ProtoMessage() {}

func (x *SubjectFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectFilterOptions.ProtoReflect.Descriptor instead.
func (*SubjectFilterOptions) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{28}
}

func (x *SubjectFilterOptions) GetOnlyUserId() string {
	if x != nil && x.OnlyUserId != nil {
		return *x.OnlyUserId
	}
	return ""
}

func (x *SubjectFilterOptions) GetOnlySubjectId() string {
	if x != nil && x.OnlySubjectId != nil {
		return *x.OnlySubjectId
	}
	return ""
}

func (x *SubjectFilterOptions) GetOnlyState() int64 {
	if x != nil && x.OnlyState != nil {
		return *x.OnlyState
	}
	return 0
}

func (x *SubjectFilterOptions) GetOnlyAttrs() int64 {
	if x != nil && x.OnlyAttrs != nil {
		return *x.OnlyAttrs
	}
	return 0
}

type Subject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" form:"id" query:"id"`
	UserId       string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId" form:"userId" query:"userId"`
	TopCommentId string `protobuf:"bytes,3,opt,name=topCommentId,proto3" json:"topCommentId" form:"topCommentId" query:"topCommentId"`
	RootCount    *int64 `protobuf:"varint,4,opt,name=rootCount,proto3,oneof" json:"rootCount" form:"rootCount" query:"rootCount"`
	AllCount     *int64 `protobuf:"varint,5,opt,name=allCount,proto3,oneof" json:"allCount" form:"allCount" query:"allCount"`
	State        State  `protobuf:"varint,6,opt,name=state,proto3,enum=cloudmind.core_api.State" json:"state" form:"state" query:"state"` // 1: 正常, 2: 删除
	Attrs        Attrs  `protobuf:"varint,7,opt,name=attrs,proto3,enum=cloudmind.core_api.Attrs" json:"attrs" form:"attrs" query:"attrs"` // 1: 无, 2: 置顶, 3: 精华, 4: 置顶+精华
}

func (x *Subject) Reset() {
	*x = Subject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subject) ProtoMessage() {}

func (x *Subject) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subject.ProtoReflect.Descriptor instead.
func (*Subject) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{29}
}

func (x *Subject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subject) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Subject) GetTopCommentId() string {
	if x != nil {
		return x.TopCommentId
	}
	return ""
}

func (x *Subject) GetRootCount() int64 {
	if x != nil && x.RootCount != nil {
		return *x.RootCount
	}
	return 0
}

func (x *Subject) GetAllCount() int64 {
	if x != nil && x.AllCount != nil {
		return *x.AllCount
	}
	return 0
}

func (x *Subject) GetState() State {
	if x != nil {
		return x.State
	}
	return State_UnknownState
}

func (x *Subject) GetAttrs() Attrs {
	if x != nil {
		return x.Attrs
	}
	return Attrs_UnknownAttrs
}

type SubjectDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" form:"id" query:"id"`
	UserId       string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId" form:"userId" query:"userId"`
	TopCommentId string `protobuf:"bytes,3,opt,name=TopCommentId,proto3" json:"TopCommentId" form:"TopCommentId" query:"TopCommentId"`
	RootCount    int64  `protobuf:"varint,4,opt,name=rootCount,proto3" json:"rootCount" form:"rootCount" query:"rootCount"`
	AllCount     int64  `protobuf:"varint,5,opt,name=allCount,proto3" json:"allCount" form:"allCount" query:"allCount"`
	State        int64  `protobuf:"varint,6,opt,name=state,proto3" json:"state" form:"state" query:"state"` // 1: 正常, 2: 删除
	Attrs        int64  `protobuf:"varint,7,opt,name=attrs,proto3" json:"attrs" form:"attrs" query:"attrs"` // 1: 无, 2: 置顶, 3: 精华, 4: 置顶+精华
}

func (x *SubjectDetails) Reset() {
	*x = SubjectDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectDetails) ProtoMessage() {}

func (x *SubjectDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectDetails.ProtoReflect.Descriptor instead.
func (*SubjectDetails) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{30}
}

func (x *SubjectDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubjectDetails) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SubjectDetails) GetTopCommentId() string {
	if x != nil {
		return x.TopCommentId
	}
	return ""
}

func (x *SubjectDetails) GetRootCount() int64 {
	if x != nil {
		return x.RootCount
	}
	return 0
}

func (x *SubjectDetails) GetAllCount() int64 {
	if x != nil {
		return x.AllCount
	}
	return 0
}

func (x *SubjectDetails) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SubjectDetails) GetAttrs() int64 {
	if x != nil {
		return x.Attrs
	}
	return 0
}

type SubjectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" form:"id" query:"id"`
	UserId string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId" form:"userId" query:"userId"`
	Attrs  int64  `protobuf:"varint,3,opt,name=attrs,proto3" json:"attrs" form:"attrs" query:"attrs"` // 1: 无, 2: 置顶, 3: 精华, 4: 置顶+精华
}

func (x *SubjectInfo) Reset() {
	*x = SubjectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectInfo) ProtoMessage() {}

func (x *SubjectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectInfo.ProtoReflect.Descriptor instead.
func (*SubjectInfo) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{31}
}

func (x *SubjectInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubjectInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SubjectInfo) GetAttrs() int64 {
	if x != nil {
		return x.Attrs
	}
	return 0
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" form:"id" query:"id"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value" form:"value" query:"value"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{32}
}

func (x *Label) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Recommends struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users" form:"users" query:"users"`
	Posts []*Post `protobuf:"bytes,2,rep,name=posts,proto3" json:"posts" form:"posts" query:"posts"`
}

func (x *Recommends) Reset() {
	*x = Recommends{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recommends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recommends) ProtoMessage() {}

func (x *Recommends) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recommends.ProtoReflect.Descriptor instead.
func (*Recommends) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{33}
}

func (x *Recommends) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *Recommends) GetPosts() []*Post {
	if x != nil {
		return x.Posts
	}
	return nil
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId     string   `protobuf:"bytes,1,opt,name=productId,proto3" json:"productId" form:"productId" query:"productId"`
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name" query:"name"`                                       // 商品名称
	Description   string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description" form:"description" query:"description"`           // 商品描述
	Url           string   `protobuf:"bytes,4,opt,name=url,proto3" json:"url" form:"url" query:"url"`                                           // 商品图片
	Tags          []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags" form:"tags" query:"tags"`                                       // 标签
	Type          int64    `protobuf:"varint,6,opt,name=type,proto3" json:"type" form:"type" query:"type"`                                      // 商品类型
	Price         int64    `protobuf:"varint,7,opt,name=price,proto3" json:"price" form:"price" query:"price"`                                  // 商品价格
	ProductSize   int64    `protobuf:"varint,8,opt,name=productSize,proto3" json:"productSize" form:"productSize" query:"productSize"`          // 商品大小
	User          *User    `protobuf:"bytes,9,opt,name=user,proto3" json:"user" form:"user" query:"user"`                                       // 商家信息
	CollectCount  int64    `protobuf:"varint,10,opt,name=collectCount,proto3" json:"collectCount" form:"collectCount" query:"collectCount"`     // 收藏量
	PurchaseCount int64    `protobuf:"varint,11,opt,name=purchaseCount,proto3" json:"purchaseCount" form:"purchaseCount" query:"purchaseCount"` // 购买量
	CreateTime    int64    `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime" form:"createTime" query:"createTime"`             // 创建时间
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudmind_core_api_common_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_cloudmind_core_api_common_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_cloudmind_core_api_common_proto_rawDescGZIP(), []int{34}
}

func (x *Product) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Product) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Product) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Product) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Product) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Product) GetProductSize() int64 {
	if x != nil {
		return x.ProductSize
	}
	return 0
}

func (x *Product) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Product) GetCollectCount() int64 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

func (x *Product) GetPurchaseCount() int64 {
	if x != nil {
		return x.PurchaseCount
	}
	return 0
}

func (x *Product) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

var File_cloudmind_core_api_common_proto protoreflect.FileDescriptor

var file_cloudmind_core_api_common_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x1a, 0x16, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x68,
	0x74, 0x74, 0x70, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76,
	0x0a, 0x06, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0xc0, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x0a, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x82, 0x02, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x6c, 0x69, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x85, 0x01, 0x0a, 0x07, 0x48, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x07, 0x48, 0x6f, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x22, 0x49, 0x0a, 0x07, 0x48, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0d,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0x95, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x22, 0xda, 0x03, 0x0a,
	0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x12, 0x34, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd7, 0x02, 0x0a, 0x0a, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x73,
	0x74, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74,
	0x55, 0x72, 0x6c, 0x22, 0x9d, 0x01, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0xa5, 0x02, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x0d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x0c, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x4b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x06,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x89, 0x04, 0x0a, 0x11, 0x46,
	0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x6f, 0x6e, 0x6c,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x6f, 0x6e,
	0x6c, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x73,
	0x44, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x5a, 0x6f,
	0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x79,
	0x5a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x53,
	0x75, 0x62, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b,
	0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x5a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x10, 0x6f, 0x6e, 0x6c, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x10, 0x6f, 0x6e, 0x6c, 0x79,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x73,
	0x44, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5a, 0x6f, 0x6e, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x5a, 0x6f, 0x6e, 0x65,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x7a, 0x0a, 0x16, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x09, 0x46,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x69, 0x65,
	0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x42,
	0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c,
	0x69, 0x6b, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x22, 0x3d, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x68,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x68, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x9f, 0x02, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x31,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe2, 0x03, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xce, 0x03, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x6e,
	0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x6f, 0x6e, 0x6c, 0x79,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x6f, 0x6e,
	0x6c, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x6f, 0x6e, 0x6c,
	0x79, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x06, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x74, 0x74, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x07, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x74, 0x74, 0x72, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x52,
	0x6f, 0x6f, 0x74, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x6f,
	0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6f,
	0x6e, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02,
	0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x74, 0x74, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x03, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x74, 0x74, 0x72, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x74, 0x74, 0x72, 0x73, 0x22, 0x96,
	0x02, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x72, 0x6f, 0x6f,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x6c, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x08, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x61,
	0x74, 0x74, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x73, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x22, 0x4b, 0x0a, 0x0b,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x22, 0x2d, 0x0a, 0x05, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6c, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e,
	0x64, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e,
	0x64, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x22, 0xe7, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69,
	0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x2a, 0x65, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15,
	0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50,
	0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x03, 0x2a, 0x5c, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0x02, 0x2a, 0x56, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x2a, 0x64, 0x0a,
	0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x55,
	0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x04, 0x2a, 0x94, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x07, 0x12,
	0x18, 0x0a, 0x14, 0x44, 0x6f, 0x77, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x09, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0a, 0x2a, 0x39, 0x0a, 0x05, 0x49, 0x73,
	0x44, 0x65, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x49, 0x73, 0x5f, 0x6e, 0x6f, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x73, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x73, 0x5f, 0x68,
	0x61, 0x72, 0x64, 0x10, 0x03, 0x2a, 0x59, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x10, 0x02,
	0x2a, 0x32, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x10, 0x02, 0x2a, 0x5a, 0x0a, 0x05, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x10, 0x0a,
	0x0c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x73, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x41, 0x6e, 0x64, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x10, 0x04,
	0x2a, 0x55, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x13, 0x0a, 0x0f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x10, 0x03, 0x42, 0x53, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x72,
	0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x7a, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d,
	0x69, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloudmind_core_api_common_proto_rawDescOnce sync.Once
	file_cloudmind_core_api_common_proto_rawDescData = file_cloudmind_core_api_common_proto_rawDesc
)

func file_cloudmind_core_api_common_proto_rawDescGZIP() []byte {
	file_cloudmind_core_api_common_proto_rawDescOnce.Do(func() {
		file_cloudmind_core_api_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloudmind_core_api_common_proto_rawDescData)
	})
	return file_cloudmind_core_api_common_proto_rawDescData
}

var file_cloudmind_core_api_common_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_cloudmind_core_api_common_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_cloudmind_core_api_common_proto_goTypes = []interface{}{
	(PostStatus)(0),                // 0: cloudmind.core_api.PostStatus
	(ProductStatus)(0),             // 1: cloudmind.core_api.ProductStatus
	(Product_Type)(0),              // 2: cloudmind.core_api.Product_Type
	(TargetType)(0),                // 3: cloudmind.core_api.TargetType
	(RelationType)(0),              // 4: cloudmind.core_api.RelationType
	(IsDel)(0),                     // 5: cloudmind.core_api.IsDel
	(DocumentType)(0),              // 6: cloudmind.core_api.DocumentType
	(State)(0),                     // 7: cloudmind.core_api.State
	(Attrs)(0),                     // 8: cloudmind.core_api.Attrs
	(Category)(0),                  // 9: cloudmind.core_api.Category
	(*Slider)(nil),                 // 10: cloudmind.core_api.Slider
	(*User)(nil),                   // 11: cloudmind.core_api.User
	(*SimpleUser)(nil),             // 12: cloudmind.core_api.SimpleUser
	(*PostUser)(nil),               // 13: cloudmind.core_api.PostUser
	(*FileUser)(nil),               // 14: cloudmind.core_api.FileUser
	(*HotUser)(nil),                // 15: cloudmind.core_api.HotUser
	(*HotPost)(nil),                // 16: cloudmind.core_api.HotPost
	(*HotFile)(nil),                // 17: cloudmind.core_api.HotFile
	(*RecommendUser)(nil),          // 18: cloudmind.core_api.RecommendUser
	(*UserDetail)(nil),             // 19: cloudmind.core_api.UserDetail
	(*PrivateFile)(nil),            // 20: cloudmind.core_api.PrivateFile
	(*PublicFile)(nil),             // 21: cloudmind.core_api.PublicFile
	(*SearchInfo)(nil),             // 22: cloudmind.core_api.SearchInfo
	(*ShareCode)(nil),              // 23: cloudmind.core_api.ShareCode
	(*SearchField)(nil),            // 24: cloudmind.core_api.SearchField
	(*SearchOptions)(nil),          // 25: cloudmind.core_api.SearchOptions
	(*ShareField)(nil),             // 26: cloudmind.core_api.ShareField
	(*FileFilterOptions)(nil),      // 27: cloudmind.core_api.FileFilterOptions
	(*ShareFileFilterOptions)(nil), // 28: cloudmind.core_api.ShareFileFilterOptions
	(*PostCount)(nil),              // 29: cloudmind.core_api.PostCount
	(*PostRelation)(nil),           // 30: cloudmind.core_api.PostRelation
	(*FileCount)(nil),              // 31: cloudmind.core_api.FileCount
	(*FileRelation)(nil),           // 32: cloudmind.core_api.FileRelation
	(*CommentRelation)(nil),        // 33: cloudmind.core_api.CommentRelation
	(*Post)(nil),                   // 34: cloudmind.core_api.Post
	(*Notification)(nil),           // 35: cloudmind.core_api.Notification
	(*Comment)(nil),                // 36: cloudmind.core_api.Comment
	(*CommentFilterOptions)(nil),   // 37: cloudmind.core_api.CommentFilterOptions
	(*SubjectFilterOptions)(nil),   // 38: cloudmind.core_api.SubjectFilterOptions
	(*Subject)(nil),                // 39: cloudmind.core_api.Subject
	(*SubjectDetails)(nil),         // 40: cloudmind.core_api.SubjectDetails
	(*SubjectInfo)(nil),            // 41: cloudmind.core_api.SubjectInfo
	(*Label)(nil),                  // 42: cloudmind.core_api.Label
	(*Recommends)(nil),             // 43: cloudmind.core_api.Recommends
	(*Product)(nil),                // 44: cloudmind.core_api.Product
}
var file_cloudmind_core_api_common_proto_depIdxs = []int32{
	42, // 0: cloudmind.core_api.PublicFile.labels:type_name -> cloudmind.core_api.Label
	14, // 1: cloudmind.core_api.PublicFile.author:type_name -> cloudmind.core_api.FileUser
	31, // 2: cloudmind.core_api.PublicFile.fileCount:type_name -> cloudmind.core_api.FileCount
	32, // 3: cloudmind.core_api.PublicFile.fileRelation:type_name -> cloudmind.core_api.FileRelation
	42, // 4: cloudmind.core_api.SearchInfo.labels:type_name -> cloudmind.core_api.Label
	24, // 5: cloudmind.core_api.SearchOptions.multiFieldsKey:type_name -> cloudmind.core_api.SearchField
	42, // 6: cloudmind.core_api.Post.labels:type_name -> cloudmind.core_api.Label
	12, // 7: cloudmind.core_api.Comment.author:type_name -> cloudmind.core_api.SimpleUser
	33, // 8: cloudmind.core_api.Comment.commentRelation:type_name -> cloudmind.core_api.CommentRelation
	7,  // 9: cloudmind.core_api.Subject.state:type_name -> cloudmind.core_api.State
	8,  // 10: cloudmind.core_api.Subject.attrs:type_name -> cloudmind.core_api.Attrs
	11, // 11: cloudmind.core_api.Recommends.users:type_name -> cloudmind.core_api.User
	34, // 12: cloudmind.core_api.Recommends.posts:type_name -> cloudmind.core_api.Post
	11, // 13: cloudmind.core_api.Product.user:type_name -> cloudmind.core_api.User
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}


func file_cloudmind_core_api_common_proto_init() {
	if File_cloudmind_core_api_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloudmind_core_api_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareFileFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Post); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recommends); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudmind_core_api_common_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloudmind_core_api_common_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_cloudmind_core_api_common_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*SearchOptions_AllFieldsKey)(nil),
		(*SearchOptions_MultiFieldsKey)(nil),
	}
	file_cloudmind_core_api_common_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_cloudmind_core_api_common_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_cloudmind_core_api_common_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_cloudmind_core_api_common_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_cloudmind_core_api_common_proto_msgTypes[29].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloudmind_core_api_common_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloudmind_core_api_common_proto_goTypes,
		DependencyIndexes: file_cloudmind_core_api_common_proto_depIdxs,
		EnumInfos:         file_cloudmind_core_api_common_proto_enumTypes,
		MessageInfos:      file_cloudmind_core_api_common_proto_msgTypes,
	}.Build()
	File_cloudmind_core_api_common_proto = out.File
	file_cloudmind_core_api_common_proto_rawDesc = nil
	file_cloudmind_core_api_common_proto_goTypes = nil
	file_cloudmind_core_api_common_proto_depIdxs = nil
}
